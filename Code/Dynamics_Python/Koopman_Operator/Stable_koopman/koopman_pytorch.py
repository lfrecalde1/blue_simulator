# -*- coding: utf-8 -*-
"""Koopman_pytorch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1svocQm7RYzZOWjtBDXcl4Ctqn3n9qOi_
"""

# Commented out IPython magic to ensure Python compatibility.
import scipy.io
import numpy as np
#import casadi as ca
import matplotlib as mpl
mpl.rcParams.update(mpl.rcParamsDefault)
import matplotlib.pyplot as plt
from scipy.spatial.transform import Rotation as R
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import grad
from torch.nn.modules.container import T
from tqdm import tqdm
from collections import defaultdict
from collections import OrderedDict
import random
from google.colab.patches import cv2_imshow
# %matplotlib inline

if torch.cuda.is_available():
    dev = "cuda:0"
else:
    dev = "cpu"
device = torch.device(dev)
print(torch.cuda.is_available())

def get_odometry(data, angle, vx, vy, vz, wx, wy, wz, vel_control, steer_control, samples_i, samples_f):
    # Get size of the data
    i, j = data.shape
    # Init empty values
    x = np.zeros((1, j), dtype = np.double)
    y = np.zeros((1, j), dtype = np.double)
    z = np.zeros((1, j), dtype = np.double)
    quatenions = np.zeros((4, j), dtype = np.double)
    orientation_aux = np.zeros((3, j), dtype = np.double)

    for k in range(0, j):

        # Get Position
        x[:, k] = data[0, k]
        y[:, k] = data[1, k]
        z[:, k] = 0

        # Get quaternion
        quatenions[:, k] = [data[2, k], data[3, k], data[4, k], data[5, k]]

        # Get Euler Angles
        aux =  quatenions[:, k]
        r = R.from_quat(aux)
        orientation_aux[:, k] = r.as_euler('xyz', degrees = False)

    # get complete data of the system
    h = np.array([x[0,:], y[0,:], z[0,:],
                quatenions[0, :], quatenions[1, :], quatenions[2, :], quatenions[3, :],
                orientation_aux[0, :], orientation_aux[1, :], orientation_aux[2, :],
                angle[0, :]], dtype =np.double)

    # Get Velocities of the system
    hp = np.array([vx[0, :], vy[0, :], vz[0, :], wx[0, :], wy[0, :], wz[0, :]], dtype = np.double)
    T = np.array([vel_control[0,:], steer_control[0, :]], dtype = np.double)
    return h[:, samples_i:samples_f+1], hp[:, samples_i:samples_f+1], T[:, samples_i:samples_f]

def get_simple_data(h, hp, T):
    ## Position
    x = h[0, :]
    y = h[1, :]
    ## Linear velocities
    vx = hp[0, :]
    vy = hp[1, :]
    vz = hp[2, :]

    ## Get angular velocities
    p = hp[3, :]
    q = hp[4, :]
    r = hp[5, :]

    ## Angular velocities vector
    omega = hp[3:6, :]

    ## Orientacion
    quaternion = h[3:7, :]

    ##euler
    euler = h[7:10, :]

    ## Steer angle =
    alpha = h[10, :]

    ## General states data
    #X = np.array([euler[2,:], omega[2, :], alpha, vx, vy], dtype = np.double)
    #X = np.array([euler[0, :], euler[1, :], euler[2, :], omega[0, :], omega[1, :], omega[2, :], alpha, vx, vy, x, y], dtype = np.double)
    X = np.array([euler[2, :], omega[2, :], alpha, vx, x, y], dtype = np.double)
    ## Control Action
    U_ref = T[:, :]

    ## Get the dimension of the Data
    i, j = X.shape

    X1 = X[:, 0:j-1]
    X2 = X[:, 1:j]
    return X1, X2, U_ref

def liftFun(x):
    x_lift = []
    for k in x: x_lift.append(k)
    x_lift.append(np.tan(x[2, :]))

    x_lift.append(np.tan(x[2, :])*x[3, :])

    x_lift.append(np.cos(x[2, :])*x[3, :])
    x_lift.append(np.sin(x[2, :])*x[3, :])

    x_lift.append(np.cos(x[0, :])*x[3, :])

    x_lift.append(np.sin(x[0, :])*x[3, :])

    x_lift = np.array(x_lift, dtype = np.double)
    return x_lift

def liftFun_vector(x):
    x_lift = []
    for k in x: x_lift.append(k)
    x_lift.append(np.tan(x[2]))

    x_lift.append(np.tan(x[2])*x[3])

    x_lift.append(np.cos(x[2])*x[3])
    x_lift.append(np.sin(x[2])*x[3])

    x_lift.append(np.cos(x[0])*x[3])

    x_lift.append(np.sin(x[0])*x[3])

    x_lift = np.array(x_lift, dtype = np.double)
    return x_lift

## Load Matrices from mat file
Data = scipy.io.loadmat('blue_data_02.mat')

## Get odometry of the system
data_odom_blue = Data['data_odom_blue']
data_odom_blue = data_odom_blue.T

## Get Control steer angle
steering_control = Data['steering_control']
steering_control = steering_control.T
steering_control = steering_control*(np.pi/180)

## Get Steer angle real
steering_real = Data['steering_real']
steering_real = steering_real.T
steering_real = steering_real*(np.pi/180)

## Get system velocities
vx = Data['vel_real']
vx = vx.T
vy = Data['vy']
vy = vy.T
vz = Data['vz']
vz = vz.T
wx = Data['wx']
wx = wx.T
wy = Data['wy']
wy = wy.T
wz = Data['wz']
wz = wz.T

## Get desired frontal velocity

vel_control = Data['vel_control']
vel_control = vel_control.T

h, hp, T = get_odometry(data_odom_blue, steering_real, vx, vy, vz, wx, wy, wz, vel_control, steering_control, 0, 1000)
## Compute sample time of the system
ts = 0.05
t = np.zeros((T.shape[1]), dtype = np.double)
for k in range(0, T.shape[1]-1):
    t[k+1] = t[k] + ts


## Get Data DMD
X1_n, X2_n, U_n = get_simple_data(h, hp, T)
n_normal = X1_n.shape[0]

# Koopman Space
X1 = liftFun(X1_n)
X2 = liftFun(X2_n)
U = U_n
n = X1.shape[0]
m = U.shape[0]

class koop_model(torch.nn.Module):
    def __init__(self, encode_layers, n, m, n_normal):
        super(koop_model,self).__init__()
        Layers = OrderedDict()
        for layer_i in range(len(encode_layers)-1):
            Layers["linear_{}".format(layer_i)] = nn.Linear(encode_layers[layer_i],encode_layers[layer_i+1])
            if layer_i != len(encode_layers)-2:
                Layers["relu_{}".format(layer_i)] = nn.ReLU()
        self.encode_net = nn.Sequential(Layers)
        self.Nkoopman = n
        self.u_dim = m
        self.A = nn.Linear(n, n,bias=False)
        self.A.weight.data = torch.eye(n)*0.1
        #U, _, V = torch.svd(self.A.weight.data)
        #self.A.weight.data = torch.mm(U, V.t()) * 0.9
        self.B = nn.Linear(m, n,bias=False)
        self.B.weight.data = torch.ones((n, m))

        self.C_eye = torch.eye(n_normal, device=device)
        self.C_zeros = torch.zeros((n_normal, n - n_normal), device=device)
        self.C= torch.cat((self.C_eye, self.C_zeros), dim=1)
        self.C = self.C.double()

    def encode(self,x):
        return torch.cat([x,self.encode_net(x)],axis=-1)

    #def forward(self,x,u):
        #return self.lA(x)+self.lB(u)
    def forward(self, X1, U):
        Gamma_1 = X1.T
        U = U.T

        output_1 = self.A(Gamma_1) + self.B(U)
        output_2 = (self.A(Gamma_1) + self.B(U))@self.C.T

        return output_1, output_2

def cost_koopman(X1, X2, U, net):

    x_k = X2.T@net.C.T
    Gamma_k = X2.T

    # output Neural Network
    output_koopman, output_prediction = net.forward(X1, U)

    # Get Error
    error_koop = Gamma_k - output_koopman
    error_prediction = x_k - output_prediction
    error_koop_new = error_koop.reshape((error_koop.shape[0]*error_koop.shape[1], 1))
    error_prediction_new = error_prediction.reshape((error_prediction.shape[0]*error_prediction.shape[1], 1))
    K = torch.cat((net.A.weight, net.B.weight), dim=1)
    manipulability = torch.sqrt(torch.det(K@K.T))
    #a_m = 0.1
    #aux_m = torch.exp(-(manipulability)^2/a_m)
    A = net.A.weight
    #loss =   1*torch.norm(error_koop_new, p=2) - 0.005*torch.det(A)
    loss =   1*torch.norm(error_koop_new, p=2) - 0.008*torch.sqrt(torch.det(A))
    return loss

## New Data in Pytorch
X1_tensor =  torch.tensor(X1,  requires_grad = True).to(device)
X1_tensor = X1_tensor.double()

X2_tensor =  torch.tensor(X2).to(device)
X2_tensor = X2_tensor.double()


C_eye = torch.eye(n_normal,  device=device)
C_zeros = torch.zeros((n_normal, n - n_normal), device=device)
C = torch.cat((C_eye, C_zeros), dim=1)

U_tensor =  torch.tensor(U, requires_grad = True).to(device)
U_tensor =  U_tensor.double()

encode_dim = 20
layer_depth=3
layer_width = 128
layers = [n_normal] + [layer_width]*layer_depth+[encode_dim]
Nkoopman = n_normal + encode_dim
neural_network = koop_model(layers, n, m, n_normal)
if torch.cuda.is_available():
    print("Yes")
    neural_network.cuda()
neural_network.double()

optimizer = torch.optim.Adam(neural_network.parameters(), lr=0.0005)

losses = defaultdict(lambda: defaultdict(list))
num_epochs = 10000
Kbatch_size = 200

losses = defaultdict(lambda: defaultdict(list))
num_epochs = 30000
Kbatch_size = 100
aux = neural_network.encode(X1_tensor[0:6, :].T)
aux_x = neural_network.B(U_tensor[:,:].T)
print(aux_x.shape)

for epoch in tqdm(range(num_epochs), desc="Koopman Neural Network: training epoch"):
        #loss.backward(retain_graph = True)
        #loss.backward(retain_graph = True)
        Kindex = list(range(X1_tensor.shape[1]))
        random.shuffle(Kindex)


        Kloss = cost_koopman(X1_tensor[:, Kindex[:Kbatch_size]], X2_tensor[:, Kindex[:Kbatch_size]], U_tensor[:, Kindex[:Kbatch_size]], neural_network)
        loss = Kloss

        # Optimize Network
        optimizer.zero_grad()

        # Backward pass: compute gradient of the loss with respect to model
        # parameters
        loss.backward()

        # Calling the step function on an Optimizer makes an update to its
        # parameters
        optimizer.step()


        losses["Koopman"]["collocation"].append(loss.item())
        losses["Koopman"]["num_epochs"].append(epoch)

## Reshape Data
## Load Matrices from mat file
Data = scipy.io.loadmat('blue_data_02.mat')

## Get odometry of the system
data_odom_blue = Data['data_odom_blue']
data_odom_blue = data_odom_blue.T

## Get Control steer angle
steering_control = Data['steering_control']
steering_control = steering_control.T
steering_control = steering_control*(np.pi/180)

## Get Steer angle real
steering_real = Data['steering_real']
steering_real = steering_real.T
steering_real = steering_real*(np.pi/180)

## Get system velocities
vx = Data['vel_real']
vx = vx.T
vy = Data['vy']
vy = vy.T
vz = Data['vz']
vz = vz.T
wx = Data['wx']
wx = wx.T
wy = Data['wy']
wy = wy.T
wz = Data['wz']
wz = wz.T

## Get desired frontal velocity

vel_control = Data['vel_control']
vel_control = vel_control.T

h, hp, T = get_odometry(data_odom_blue, steering_real, vx, vy, vz, wx, wy, wz, vel_control, steering_control, 0, 500)
## Compute sample time of the system
ts = 0.05
t = np.zeros((T.shape[1]), dtype = np.double)
for k in range(0, T.shape[1]-1):
    t[k+1] = t[k] + ts


## Get Data DMD
X1_n, X2_n, U_n = get_simple_data(h, hp, T)
n_normal = X1_n.shape[0]

# Koopman Space
X1 = liftFun(X1_n)
X2 = liftFun(X2_n)
U = U_n

A_a = neural_network.A.weight.cpu()
A_a = A_a.double()
A_a = A_a.detach().numpy()

B_a = neural_network.B.weight.cpu()
B_a = B_a.double()
B_a = B_a.detach().numpy()

C_ones = np.eye(n_normal, dtype = np.double)
C_zeros = np.zeros((n_normal, n - n_normal), dtype=np.double)
C_a = np.hstack((C_ones, C_zeros))

## Plot matrix A
plt.imshow(A_a)
plt.colorbar()
plt.show()
#
# Plot matrix B
plt.imshow(B_a)
plt.colorbar()
plt.show()
#
# New variables in order to verify the identification
x_estimate = np.zeros((n_normal, X1.shape[1]+1), dtype=np.double)
output_estimate = np.zeros((n_normal, U.shape[1]), dtype=np.double)
output_real = np.zeros((n_normal, U.shape[1]), dtype=np.double)
error_vector = np.zeros((n_normal, U.shape[1]), dtype=np.double)
norm_error = np.zeros((1, U.shape[1]), dtype = np.double)

# Initial value
x_estimate[:, 0] = C_a@X1[:, 0]

for k in range(0, U.shape[1]):
    output_estimate[:, k] = x_estimate[:, k]
    output_real[:, k] = C_a@X1[:, k]

    error_vector[:, k] = output_real[:, k] - output_estimate[:, k]
    norm_error[:, k] = np.linalg.norm(error_vector[:, k])

    aux_states = liftFun_vector(x_estimate[:, k])
    x_estimate[:, k+1] = C_a@(A_a@aux_states + B_a@U[:, k])

print("Error estimation norm")
print(np.linalg.norm(norm_error))
eig_A, eigv_A = np.linalg.eig(A_a)
deter = np.linalg.det(A_a)
print(" Eigvalues A")
print(eig_A)
print(deter)

fig, ax1 = plt.subplots(1, 1, figsize=(10, 5))

# Plot x_estimate with label 'x_estimate'
ax1.plot(x_estimate[0, :], label='psi_estimada')

# Plot h with label 'h'
ax1.plot(h[9, 0:X1.shape[1]+1], label='psi_real')

# Add a legend
ax1.legend()

# Show the plot
plt.show()

fig, ax1 = plt.subplots(1, 1, figsize=(10, 5))

# Plot x_estimate with label 'x_estimate'
ax1.plot(x_estimate[1, :], label='omega_estimada')

# Plot h with label 'h'
ax1.plot(hp[5, 0:X1.shape[1]+1], label='omega_real')

# Add a legend
ax1.legend()

# Show the plot
plt.show()

fig, ax1 = plt.subplots(1, 1, figsize=(10, 5))

# Plot x_estimate with label 'x_estimate'
ax1.plot(x_estimate[2, :], label='alpha_estimada')

# Plot h with label 'h'
ax1.plot(h[10, 0:X1.shape[1]+1], label='alpha_real')

# Add a legend
ax1.legend()

# Show the plot
plt.show()

fig, ax1 = plt.subplots(1, 1, figsize=(10, 5))

# Plot x_estimate with label 'x_estimate'
ax1.plot(x_estimate[3, :], label='vx_estimada')

# Plot h with label 'h'
ax1.plot(hp[0, 0:X1.shape[1]+1], label='vx_real')

# Add a legend
ax1.legend()

# Show the plot
plt.show()

fig, ax1 = plt.subplots(1, 1, figsize=(10, 5))

# Plot x_estimate with label 'x_estimate'
ax1.plot(x_estimate[4, :], label='x_estimada')

# Plot h with label 'h'
ax1.plot(h[0, 0:X1.shape[1]+1], label='x_real')

# Add a legend
ax1.legend()

# Show the plot
plt.show()

fig, ax1 = plt.subplots(1, 1, figsize=(10, 5))

# Plot x_estimate with label 'x_estimate'
ax1.plot(x_estimate[5, :], label='y_estimada')

# Plot h with label 'h'
ax1.plot(h[1, 0:X1.shape[1]+1], label='y_real')

# Add a legend
ax1.legend()

# Show the plot
plt.show()

losses["Koopman"]["collocation"]
costo = np.array(losses["Koopman"]["collocation"])
epochs = np.array(losses["Koopman"]["num_epochs"])
costo = costo.reshape(1, costo.shape[0])
costo

fig, ax1 = plt.subplots(1, 1, figsize=(10, 5))

# Plot x_estimate with label 'x_estimate'
ax1.plot(costo[0,:], label='error')


# Add a legend
ax1.legend()

# Show the plot
plt.show()

